<!DOCTYPE html>
<html lang="en">

<head>
    <!-- Required meta tags -->
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css"
        integrity="sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l" crossorigin="anonymous" />
    <link rel="stylesheet" type="text/css" href="/css/hostPage.css" />
    <title>Host Page</title>
</head>

<body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="/">Qmate</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent"
            aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item">
                    <a class="nav-link" href="/xyz" data-toggle="modal" data-target="#createFormModal">Create form</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/logout">Logout</a>
                </li>
            </ul>
        </div>
    </nav>

    <!-- Modal -->
    <div class="modal fade" id="createFormModal" tabindex="-1" role="dialog" aria-labelledby="createFormModalTitle"
        aria-hidden="true">
        <div class="modal-dialog modal-dialog-scrollable" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="createFormModalTitle">
                        Enrollment Form
                    </h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <%if(formData.length==0) {%>
                        <form action="/createForm/<%=class_code%>" method="post" id="createForm">
                            <ul id="fieldList"></ul>
                        </form>
                        <button onclick="addField()">Add field</button>
                        <%} else {%>
                            <form action="/createNewForm/<%=class_code%>" method="GET" id="createNewForm">
                                <ul id="formDataList"></ul>
                            </form>
                            <%}%>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">
                        Close
                    </button>
                    <button type="submit" class="btn btn-primary" id="submitFormbtn" form="createForm">
                        Save form
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="container-fluid">
        <div class="row">
            <div class="col-3">
                <div id="classroomCodediv">
                    <%=class_code%>
                </div>
                <div>
                    <ul id="testList"></ul>

                    <button type="button" id="createNewTestbtn" class="btn btn-primary" data-toggle="modal"
                        data-target="#testNameModal">
                        ADD TEST
                    </button>

                    <!-- Modal -->
                    <div class="modal fade" id="testNameModal" tabindex="-1" role="dialog"
                        aria-labelledby="testNameModalTitle" aria-hidden="true">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="testNameModalTitle">
                                        Add test name.
                                    </h5>
                                    <p>Test name should be unique.</p>
                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                </div>
                                <div class="modal-body">
                                    <form action="/createNewTest/<%=class_code%>" method="post" id="newTestNameForm">
                                        <input type="text" name="testName" id="" placeholder="Enter Test Name" />
                                    </form>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-dismiss="modal">
                                        Close
                                    </button>
                                    <button type="submit" class="btn btn-primary" form="newTestNameForm">
                                        Create Test
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-5" style="background-color: yellow; height: 50vh">
                2
            </div>
            <div class="col-4">
                <div>
                    <button type="button">Pending Students</button>
                    <div id="pendingStudent">
                        <ul id="pendingStudentList">

                        </ul>
                    </div>
                    <div>
                        <button type="button">Accepted Students</button>
                        <div id="acceptStudent">
                            <ul id="acceptedStudentList">

                            </ul>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>

    <!-- Optional JavaScript; choose one of the two! -->

    <!-- Option 1: jQuery and Bootstrap Bundle (includes Popper) -->

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"
        integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-Piv4xVNRyMGpqkS2by6br4gNJ7DXjqk09RmUpJ8jgGtD7zP9yug3goQfGII0yAns"
        crossorigin="anonymous"></script>
    <script type="text/javascript">
        let stringformData = '<%-JSON.stringify(formData)%>';
        let formData = JSON.parse(stringformData);
        if (formData.length == 0) {
            addField();
        } else {
            generateListItems();
        }

        let stringTestNames = '<%-JSON.stringify(testNames)%>';
        let testNames = JSON.parse(stringTestNames);
        if (testNames.length == 5) {
            let newTestbtn = document.getElementById("createNewTestbtn");
            newTestbtn.classList.add("hiddenElement");
        }

        function addField() {
            let newEle = document.createElement("li");
            newEle.innerHTML =
                '<input type="text" class="inputListItem" name="inputName" id="newItem"/>';
            let ulist = document.getElementById("fieldList");
            ulist.appendChild(newEle);
        }

        function generateListItems() {
            let n = formData.length;
            for (let i = 0; i < n; ++i) {
                let newLiEle = document.createElement("p");
                newLiEle.innerHTML =
                    '<p class="existingListItem">' + formData[i] + "</p>";
                let ulist = document.getElementById("formDataList");
                ulist.appendChild(newLiEle);
            }
            let savebtn = document.getElementById("submitFormbtn");
            savebtn.innerText = "Edit form";
            savebtn.setAttribute("form", "createNewForm");
        }

        function showTestNames() {
            let n = testNames.length;
            for (let i = 0; i < n; ++i) {
                let newEle = document.createElement("li");
                newEle.setAttribute("id", testNames[i]);
                newEle.classList.add("testList");
                newEle.innerHTML =
                    '<p class="testNamePara">' +
                    testNames[i] +
                    '</p><button clsass="editbtn" onclick="editTest()">edit</button><button onclick="deleteTest()" class="deletebtn">delete</button><button class="resultbtn" name="'+testNames[i]+'" onclick="showResult()">Result</button>';
                let ulist = document.getElementById("testList");
                ulist.appendChild(newEle);
            }
        }
        showTestNames();
        function deleteTest() {
            toggleActive().then(deleteTestCB);
        }

        function showResult(){
            const testName = event.target.name;
            const classCode= JSON.parse('<%-JSON.stringify(class_code)%>');
            const url = '/resultPage/'+classCode+'/'+testName;
            
            location.href = url;
        }

        function toggleActive() {
            return new Promise((res, rej) => {
                let testList = document.querySelectorAll(".testList");
                let n = testList.length;
                for (let i = 0; i < n; i++) {
                    testList[i].onclick = function () {
                        for (let j = 0; j < n; ++j) {
                            if (testList[j].classList.contains("activeTest")) {
                                testList[j].classList.remove("activeTest");
                            }
                        }
                        testList[i].classList.add("activeTest");
                        res();
                    };
                }
            });
        }

        function deleteTestCB() {
            const classCodeString = '<%-JSON.stringify(class_code)%>';
            const classCode = JSON.parse(classCodeString);
            let testName = document.querySelector(".activeTest").id;
            let resp = confirm("Do you want to Delete test" + testName);
            if (!resp) return;

            const url =
                "http://localhost:3000/" + classCode + "/deleteTest/" + testName;
            fetch(url)
                .then((resp) => {
                    location.reload();
                })
                .catch(() => {
                    alert("Something went wrong");
                });
        }

        function editTest() {
            toggleActive()
                .then(() => {
                    const classCodeString = '<%-JSON.stringify(class_code)%>';
                    const classCode = JSON.parse(classCodeString);
                    let testName = document.querySelector(".activeTest").id;

                    const url =
                        "http://localhost:3000/createTest/" +
                        classCode +
                        "/" +
                        testName +
                        "/edit";

                    location.href = url;
                })
                .catch(() => {
                    console.log("test not selected");
                });
        }

        function showPendingStudents() {
            deleteStudentList().then(() => {
                let studentList = JSON.parse('<%-JSON.stringify(pendingStudents)%>')
                let pendingList = document.getElementById('pendingStudentList');

                let n = studentList.length;

                if (n == 0) return;
                let params = Object.keys(studentList[0]);
                let len = params.length;

                for (let i = 0; i < Math.min(n, 3); ++i) {
                    let newDiv = document.createElement('div');
                    newDiv.classList.add("pendingStudentDiv");
                    newDiv.setAttribute('id', i);

                    for (let j = 0; j < len; j++) {
                        let divInfo = document.createElement('p');
                        divInfo.innerText = params[j] + ' : ' + studentList[i][params[j]];
                        newDiv.appendChild(divInfo);
                    }
                    let btnDiv = document.createElement('div');
                    btnDiv.innerHTML = '<button onclick="removeStudent()">Reject</button><button onclick="acceptStudents()">Accept</button>'
                    newDiv.appendChild(btnDiv);
                    pendingList.appendChild(newDiv);
                }
            })
        }
        showPendingStudents();
        function deleteStudentList() {
            return new Promise((res, rej) => {
                while (document.querySelector('.pendingStudentDiv') != null) {
                    document.querySelector('.pendingStudentDiv').remove();
                }
                res();
            })

        }
        function removeStudent() {
            toggleActiveStudents().then(() => {
                let idx = document.querySelector(".activeStudent").id;
                let classCode = JSON.parse('<%-JSON.stringify(class_code)%>');
                let url = 'http://localhost:3000/rejectStudent/' + classCode

                fetch(url, {
                    method: 'POST',
                    body: JSON.stringify({ idx: idx }),
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }).then((resp) => {
                    location.reload();
                }).catch((err) => {
                    console.log(err)
                });

            }).catch(() => {
                console.log("toggle error");
            });
        }
        function toggleActiveStudents() {
            return new Promise((res, rej) => {
                let student = document.querySelectorAll(".pendingStudentDiv");
                let n = student.length;


                for (let i = 0; i < n; ++i) {
                    student[i].onclick = function () {
                        for (let j = 0; j < n; ++j) {
                            if (student[j].classList.contains("activeStudent")) {
                                student[j].classList.remove("activeStudent");
                            }
                        }
                        student[i].classList.add("activeStudent");
                        res();
                    }
                }
            })
        }
        function acceptStudents() {
            toggleActiveStudents().then(() => {
                let idx = document.querySelector(".activeStudent").id;
                let classCode = JSON.parse('<%-JSON.stringify(class_code)%>');
                let url = 'http://localhost:3000/acceptStudent/' + classCode;
                const params = {
                    method: "POST",
                    body: JSON.stringify({ idx: idx }),
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }

                fetch(url, params).then((resp) => {
                    location.reload();
                }).catch((err) => {
                    console.log(err);
                })
            })
        }
        displayActiveStudents(0);
        function displayActiveStudents(idx) {
            let studentList = JSON.parse('<%-JSON.stringify(registeredStudents)%>');
            let n = studentList.length;
            if (n == 0) return;
            let params = Object.keys(studentList[0]);
            let len = params.length;
            let uList = document.getElementById('acceptedStudentList')
            for (let i = idx; i < Math.min(n, idx+3); ++i) {
                let newDiv = document.createElement('div');
                newDiv.classList.add("acceptedStudentDiv");

                for (let j = 0; j < len; j++) {
                    let divInfo = document.createElement('p');
                    divInfo.innerText = params[j] + ' : ' + studentList[i][params[j]];
                    newDiv.appendChild(divInfo);
                }
                uList.appendChild(newDiv);
            } 
            let atag = document.createElement('a');
            atag.setAttribute('href' , '/showRegisteredStudents');
            atag.innerText = 'view all'
            uList.appendChild(atag);
        }

    </script>

    <!-- Option 2: Separate Popper and Bootstrap JS -->
    <!--
     <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
     <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js" integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN" crossorigin="anonymous"></script>
     <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.min.js" integrity="sha384-+YQ4JLhjyBLPDQt//I+STsc9iw4uQqACwlvpslubQzn4u2UU2UFM80nGisd026JF" crossorigin="anonymous"></script>
    
</body>

</html>